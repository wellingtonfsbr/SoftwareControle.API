@page "/usuario/{UsuarioId}"

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject IOrdemEndpoints ordemEndpoints
@inject NavigationManager navManager

@if (inicializado)
{

	<div class="elemento-detalhes-box">
		@if (UsuarioPerfilModel?.ImagemString != string.Empty)
		{
			<div class="text-center my-4">
				<img id="usuario-foto"
					 src="data:image/jpeg;base64,@UsuarioPerfilModel?.ImagemString" alt="Foto"
					 class="ferramenta-detalhes-foto">
			</div>
		}

		<div>
			<div class="label-principal">Nome do Usuario</div>
			<div class="text-center my-2 fs-3">@UsuarioPerfilModel!.Nome</div>
		</div>
		<div class="mt-4">
			<div class="label-principal">Informações</div>
			<div class="d-flex justify-content-evenly my-4">
				<div class="text-center ">
					<div class="my-2 fs-2 fw-bold" style="color:silver">Cargo</div>
					<div class="my-2 fs-4">@UsuarioPerfilModel!.Cargo</div>
				</div>
				<div class="text-center">
					<div class="my-2 fs-2 fw-bold" style="color:silver">Criado em</div>
					<div class="my-2 fs-4">@UsuarioPerfilModel.DataCriacao.ToString("dd/MM/yyyy")</div>
				</div>
			</div>
		</div>
	</div>
	@if (mostrarDeletarDiv)
	{
		<div class="text-center">
			<div class="fs-4 my-4">
				Tem certeza que deseja deletar esse usuario?
			</div>
			<div>
				<button @onclick="Deletar" class="botao-principal">Confirmar</button>
			</div>
		</div>
	}
	<div class="d-flex my-5 justify-content-end align-items-center">
		@if (UsuarioLogadoModel!.Cargo == "Administrador")
		{
			<div>
				<a href="/usuario/editar/@UsuarioPerfilModel.Id" class="botao-principal">Editar</a>
			</div>
			<div>
				<a href="/alterarsenha/@UsuarioPerfilModel.Id" class="botao-principal">Alterar senha</a>
			</div>
			<div style="margin-bottom: 6px;">
				<button @onclick="MostrarDelete" class="botao-principal"
						id="botao-principal">
					@mostrarDeletarBotaoNome
				</button>
			</div>
		}
		<div>
			<a href="/usuarios" class="botao-principal">Voltar</a>
		</div>
	</div>

	<div class="text-center my-4 fs-3 fw-bold">
		Ordens concluidas pelo usuario.
	</div>

	<Virtualize Items="@ListaOrdem" Context="ordem" OverscanCount="50">
		<a class="elementos-lista" href="/ordem/@ordem.Id">
			<div class="elemento-node">@ordem.Descricao</div>
			<div class="elemento-node">
				@if (@ordem.NivelUrgencia.ToString() == "Urgente")
				{
					<div class="text-color-danger">Urgente</div>
				}
				else
				{
					<div>Normal</div>
				}
			</div>
			<div class="elemento-node">@ordem.DataCriacao</div>
			<div class="elemento-node">@ordem.DataPrazoMaximo.ToString("dd/MM/yyyy")</div>
			<div class="elemento-node">
				@if (ordem.Situacao == "Espera")
				{
					<div class="situacao-espera">Espera</div>
				}
				else if (ordem.Situacao == "Iniciada")
				{
					<div class="situacao-iniciada">Iniciada</div>
				}
				else
				{
					<div class="situacao-finalizada">Finalizada</div>
				}
			</div>
			<div class="elemento-node">@ordem.NomeResponsavel</div>
			<div class="elemento-node">@ordem.NomeFerramenta</div>
		</a>
	</Virtualize>
}

@code {
	[Parameter]
	public string? UsuarioId { get; set; }

	private Guid UsuarioLogadoId { get; set; }
	private UsuarioModel? UsuarioLogadoModel { get; set; }
	private UsuarioModel? UsuarioPerfilModel { get; set; }
	private List<OrdemModel>? ListaOrdem { get; set; }

	private bool inicializado = false;
	private string mostrarDeletarBotaoNome = "Deletar";
	private bool mostrarDeletarDiv = false;

	protected override async Task OnInitializedAsync()
	{
		if (UsuarioId == Guid.Empty.ToString())
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}

		await BuscarUsuarioPerfilModel();
		if (UsuarioPerfilModel is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}

		await BuscarUsuarioLogadoId();
		if (UsuarioLogadoId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
			return;
		}

		await BuscarUsuarioLogadoModel();
		if (UsuarioLogadoModel is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}

		await BuscarOrdens();

		inicializado = true;
	}

	private async Task BuscarUsuarioLogadoId()
	{
		UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
	}
	private async Task BuscarUsuarioLogadoModel()
	{
		UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
	}
	private async Task BuscarUsuarioPerfilModel()
	{
		UsuarioPerfilModel = await usuarioEndpoints.BuscarPorId(Guid.Parse(UsuarioId!));
	}

	private async Task Deletar()
	{
		await usuarioEndpoints.Deletar(Guid.Parse(UsuarioId!));
		navManager.NavigateTo("/usuarios");
	}

	private async Task BuscarOrdens()
	{
		var ordens = await ordemEndpoints.BuscarPorNomeResponsavel(UsuarioLogadoModel!.Nome);

		if (ordens is not null)
		{
			ListaOrdem = ordens.OrderByDescending(x => x.DataCriacao).ToList();
		}
	}

	private void MostrarDelete()
	{
		if (mostrarDeletarDiv is false)
		{
			mostrarDeletarDiv = true;
			mostrarDeletarBotaoNome = "Ocultar";
			return;
		}

		mostrarDeletarDiv = false;
		mostrarDeletarBotaoNome = "Deletar";
	}
}

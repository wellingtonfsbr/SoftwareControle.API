@page "/usuario/criar"

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
	<div class="form-label">Criar usuário</div>

    <EditForm Model="UsuarioCriado" OnValidSubmit="Criar" Context="Form">
		<div class="criar-form-div">
			<div class="text-center my-4">
				<div class="fs-3 my-2">
					Usuario
				</div>
				<div>
					<InputText @bind-Value="UsuarioCriado!.Usuario"
							   class="input" placeholder="Usuario" />
				</div>
			</div>
			<div class="text-center my-4">
				<div class="fs-3 my-2">
					Senha
				</div>
				<div>
					<InputText type="password" @bind-Value="UsuarioCriado!.Senha"
						class="input" placeholder="Senha" />
				</div>
			</div>
			<div class="text-center my-4">
				<div class="fs-3 my-2">
					Nome
				</div>
				<div>
					<InputText @bind-Value="UsuarioCriado!.Nome"
						class="input" placeholder="Nome" />
				</div>
			</div>
			<div class="text-center my-4">
				<div class="fs-3 my-2">
					Cargo
				</div>
				<select @bind="UsuarioCriado.Cargo" class="input">
					<option value="">Selecionar cargo</option>
					<option value="Funcionario">Funcionario</option>
					<option value="Administrador">Administrador</option>
				</select>
			</div>
			<div class="text-center">
				<div class="fs-3 my-2">
					Foto de perfil
				</div>
				<div>
					<InputFile OnChange="ProcessarImagem" />
				</div>
			</div>
			<div class="d-flex my-5 justify-content-end align-items-center">
				<div>
					<button type="submit" class="botao-principal"
							id="botao-padding-ajustes">
						Criar
					</button>
				</div>
				<div>
					<a href="/usuarios" class="botao-principal">Voltar</a>
				</div>
			</div>
		</div>
    </EditForm>
	<div class="text-center text-danger my-5 fs-3 fw-bold">
		@resultado
	</div>
}

@code {
	public Guid UsuarioLogadoId { get; set; }
	private UsuarioModel? UsuarioLogadoModel { get; set; }
	private UsuarioModel? UsuarioCriado = new();

	private bool inicializado = false;
	private string? resultado = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await BuscarUsuarioLogadoId();
		if(UsuarioLogadoId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
			return;
		}

		await BuscarUsuarioLogadoModel();
		if(UsuarioLogadoModel is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}

		if(UsuarioLogadoModel.Cargo != "Administrador")
		{
			navManager.NavigateTo("/naoautorizado");
			return;
		}

		inicializado = true;
	}

	private async Task BuscarUsuarioLogadoId()
	{
		UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
	}
	private async Task BuscarUsuarioLogadoModel()
	{
		UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
	}

	private async Task ProcessarImagem(InputFileChangeEventArgs e)
	{
		var file = e.File;

		if (file != null)
		{
			var stream = file.OpenReadStream();
			var bytes = new byte[stream.Length];
			await stream.ReadAsync(bytes);
			UsuarioCriado!.Imagem = bytes;
		}
	}
	private async Task Criar()
	{
		resultado = await usuarioEndpoints.Criar(UsuarioCriado!);

		if(resultado is null)
		{
			navManager.NavigateTo("/usuarios");
			return;
		}
	}
}

@page "/alterarsenha/{UsuarioId}"

@inject ISessaoUsuario sessao
@inject IUsuarioEndpoints usuarioEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
	<EditForm Model="UsuarioTrocarSenha" OnValidSubmit="Atualizar" Context="Form">

		<div class="formulario">
			<div class="text-simplesE">
				<div class="text-center fs-2 ">Trocar senha do usuario</div>


				<div class="card2">
					<div class="textBox2">
						<div class="textContent">
							<div class="text-center fs-2 "> @UsuarioTrocarSenha!.Nome</div>

						</div>
					</div>
				</div>


			</div>



			<div class="text-simplesW ">
				<span>Digite a nova senha</span>
			</div>

			<label class="label">
				<div>
					<InputText @bind-Value="UsuarioTrocarSenha!.Senha" type="password"
							   class="input-bordas" placeholder="Nova Senha" />
					<span class="focus-border"> <i></i> </span>
				</div>
			</label>

			<div class="text-simplesW ">
				<span>Confirmar nova senha</span>
			</div>

			<div>
				<InputText @bind-Value="confirmarSenha" type="password"
						   class="input-bordas" placeholder="Confirmar Senha" />

			</div>


			<div class="d-flex my-10 justify-content-end align-items-center">
				<div style="margin-bottom: 7px;">
					<button type="submit" class="botao-principal"
							id="botao-principal" style="margin-top: 55px;">
						Alterar
					</button>
				</div>

				<div>
					<a href="/usuario/@UsuarioId" class="botao-principal" style="margin-top: 55px;">Voltar</a>
				</div>

			</div>
		</div>
	</EditForm>

	<div class="text-center text-danger my-5 fs-3 fw-bold">
		@resultado
	</div>
}

@code {
	[Parameter]
	public string? UsuarioId { get; set; }

	private Guid UsuarioLogadoId { get; set; }
	private UsuarioModel? UsuarioLogadoModel { get; set; }
	private UsuarioModel? UsuarioTrocarSenha = new();

	private bool inicializado = false;
	private string? resultado = string.Empty;
	private string confirmarSenha = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await BuscarUsuarioLogadoId();
		if (UsuarioLogadoId == Guid.Empty)
		{
			navManager.NavigateTo("/login");
			return;
		}

		await BuscarUsuarioLogadoModel();
		if (UsuarioLogadoModel is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}
		if (UsuarioLogadoModel.Cargo != "Administrador")
		{
			navManager.NavigateTo("/naoautorizado");
			return;
		}

		await BuscarUsuarioTrocarSenha();
		if (UsuarioTrocarSenha is null)
		{
			navManager.NavigateTo("/naoencontrado");
			return;
		}

		inicializado = true;
	}

	private async Task BuscarUsuarioLogadoId()
	{
		UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
	}
	private async Task BuscarUsuarioLogadoModel()
	{
		UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
	}
	private async Task BuscarUsuarioTrocarSenha()
	{
		UsuarioTrocarSenha = await usuarioEndpoints.BuscarPorId(Guid.Parse(UsuarioId!));
	}

	private async Task Atualizar()
	{
		if (UsuarioTrocarSenha!.Senha != confirmarSenha)
		{
			resultado = "As senhas não coincidem.";
			return;
		}

		resultado = await usuarioEndpoints.AtualizarSenha(UsuarioTrocarSenha!);

		if (resultado is not null)
			return;

		navManager.NavigateTo($"/usuario/{UsuarioTrocarSenha!.Id}");
	}
}

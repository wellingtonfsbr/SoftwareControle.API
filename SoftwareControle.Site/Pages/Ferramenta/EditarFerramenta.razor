@page "/ferramenta/editar/{FerramentaId}"

@inject ISessaoUsuario sessao
@inject IFerramentaEndpoints ferramentaEndpoints
@inject IUsuarioEndpoints usuarioEndpoints
@inject IRelatorioEndpoints relatorioEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
    <div class="form-label">Editar ferramenta</div>

    <EditForm Model="Ferramenta" OnValidSubmit="Atualizar" Context="Form">
        <div class="criar-form-div">
            <div class="text-center my-4">
                <div class="fs-3 my-2">
                    Nome da ferramenta
                </div>
                <div>
                    <InputText @bind-Value="Ferramenta!.Nome" class="input" placeholder="Nome" />
                </div>
            </div>
            <div class="text-center my-4">
                <div class="fs-3 my-2">
                    Descrição da ferramenta
                </div>
                <div>
                    <InputTextArea @bind-Value="Ferramenta!.Descricao" class="input"
                                   placeholder="Descrição" />
                </div>
            </div>
            <div class="text-center">
                <div class="fs-3 my-2">
                    Insira uma imagem
                </div>
                <div>
                    <InputFile OnChange="ProcessarImagem" />
                </div>
            </div>
            <div class="d-flex my-5 justify-content-end align-items-center">
                <div>
                    <button type="submit" class="botao-principal" id="botao-padding-ajustes">Atualizar</button>
                </div>
                <div>
                    <a href="/ferramentas" class="botao-principal">Voltar</a>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="text-center my-5 fs-3">
        @resultado
    </div>
}

@code {
    [Parameter]
    public string? FerramentaId { get; set; }

    private Guid IdUsuarioLogado { get; set; }
    private UsuarioModel? UsuarioLogadoModel { get; set; }
    private FerramentaModel? Ferramenta = new();
    private RelatorioModel? Relatorio = new();

    private bool inicializado = false;
    private string? resultado = "";

    protected async override Task OnInitializedAsync()
    {
        if (FerramentaId == Guid.Empty.ToString())
        {
            navManager.NavigateTo("/naoencontrado");
            return;
        }

        await BuscarIdUsuarioLogado();
        if (IdUsuarioLogado == Guid.Empty)
        {
            navManager.NavigateTo("/login");
            return;
        }

        await BuscarModelUsuarioLogado();
        if (UsuarioLogadoModel is null)
        {
            navManager.NavigateTo("/login");
        }

        if (UsuarioLogadoModel!.Cargo != "Administrador")
        {
            navManager.NavigateTo("/naoautorizado");
            return;
        }

        await BuscarFerramentaModel();

        inicializado = true;
    }

    private async Task BuscarIdUsuarioLogado()
    {
        IdUsuarioLogado = await sessao.BuscarIdDoUsuarioLogado();
    }
    private async Task BuscarModelUsuarioLogado()
    {
        UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(IdUsuarioLogado);
    }
    private async Task BuscarFerramentaModel()
    {
        Ferramenta = await ferramentaEndpoints.BuscarPorId(Guid.Parse(FerramentaId!));
    }

    private async Task Atualizar()
    {
        Ferramenta!.UsuarioId = IdUsuarioLogado;

        resultado =  await ferramentaEndpoints.Atualizar(Ferramenta);
        if(resultado is not null)
        {
            resultado = FiltrarResultado(resultado);
            return;
        }

        await CriarRelatorio();

        navManager.NavigateTo($"/ferramenta/{FerramentaId}");
    }

    private async Task<string?> CriarRelatorio()
    {
        Relatorio!.Descricao = $"O usuario {UsuarioLogadoModel!.Nome} atualizou a ferramenta " +
        $"{Ferramenta!.Nome} no sistema.";
        Relatorio.NomeUsuario = UsuarioLogadoModel.Nome;
        Relatorio.NomeFerramenta = Ferramenta.Nome;

        var resultado = await relatorioEndpoints.Criar(Relatorio);

        return resultado;
    }
    private async Task ProcessarImagem(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var stream = file.OpenReadStream();
            var bytes = new byte[stream.Length];
            await stream.ReadAsync(bytes);

            Ferramenta!.Imagem = bytes;
        }
    }
    private string? FiltrarResultado(string resultado)
    {
        if (resultado.Contains("The Nome field is required."))
        {
            return "Preencha o campo nome.";
        }
        if (resultado.Contains("The Descricao field is required."))
        {
            return "Preencha o campo de descrição.";
        }

        return resultado;
    }
}

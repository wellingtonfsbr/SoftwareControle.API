@page "/ordem/criar/{FerramentaId}"

@inject ISessaoUsuario sessao
@inject IOrdemEndpoints ordemEndpoints
@inject IFerramentaEndpoints ferramentaEndpoints
@inject IUsuarioEndpoints usuarioEndpoints
@inject IRelatorioEndpoints relatorioEndpoints
@inject NavigationManager navManager

@if (inicializado)
{
    <div class="form-label">Criar Ordem para @Ferramenta!.Nome</div>

    <EditForm Model="Ordem" OnValidSubmit="Criar" Context="Form">
        <div class="criar-form-div">
            <div class="text-center">
                <div class="fs-3 my-2">
                    Descrição da ordem
                </div>
                <div>
                    <InputTextArea @bind-Value="Ordem!.Descricao" class="input" placeholder="Descrição" />
                </div>
            </div>
            <div class="text-center">
                <div class="fs-3 my-2">
                    Nivel de urgência
                </div>
                <div>
                    <select @bind="Ordem.NivelUrgencia" class="input">
                        <option value="">Selecionar urgência</option>
                        <option value="Urgente">Urgente</option>
                        <option value="Normal">Normal</option>
                    </select>
                </div>
            </div>
            <div class="text-center">
                <div class="fs-3 my-2">
                    Data de prazo máximo
                </div>
                <div>
                    <InputDate @bind-Value="Ordem!.DataPrazoMaximo"
                               class="input" placeholder="Prazo Máximo" />
                </div>
            </div>
            <div class="d-flex my-5 justify-content-end align-items-center">
                <div>
                    <button type="submit" class="botao-principal"
                            id="botao-padding-ajustes">
                        Criar
                    </button>
                </div>
                <div>
                    <a href="/ferramenta/@FerramentaId" class="botao-principal">Voltar</a>
                </div>
            </div>
        </div>
    </EditForm>

    <div class="text-center my-5 fs-3">@resultado</div>
}

@code {
    [Parameter]
    public string? FerramentaId { get; set; }

    private Guid UsuarioLogadoId { get; set; }
    private OrdemModel? Ordem { get; set; } = new();
    private FerramentaModel? Ferramenta { get; set; }
    private UsuarioModel? UsuarioLogadoModel { get; set; }
    private RelatorioModel Relatorio = new();

    private bool inicializado = false;
    private string? resultado = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await BuscarUsuarioLogadoId();
        if(UsuarioLogadoId == Guid.Empty)
        {
            navManager.NavigateTo("/login");
            return;
        }

        await BuscarUsuarioLogadoModel();
        if(UsuarioLogadoModel is null)
        {
            navManager.NavigateTo("/login");
            return;
        }
        if(UsuarioLogadoModel.Cargo != "Administrador")
        {
            navManager.NavigateTo("/naoautorizado");
            return;
        }

        await BuscarFerramentaModel();
        if(Ferramenta is null)
        {
            navManager.NavigateTo("/naoencontrado");
            return;
        }

        if(Ferramenta.Disponivel is false)
        {
            navManager.NavigateTo("/findisponivel");
            return;
        }

        Ordem!.DataPrazoMaximo = DateTime.Today;

        inicializado = true;
    }

    private async Task BuscarUsuarioLogadoId()
    {
        UsuarioLogadoId = await sessao.BuscarIdDoUsuarioLogado();
    }
    private async Task BuscarFerramentaModel()
    {
        Ferramenta = await ferramentaEndpoints.BuscarPorId(Guid.Parse(FerramentaId!));
    }
    private async Task BuscarUsuarioLogadoModel()
    {
        UsuarioLogadoModel = await usuarioEndpoints.BuscarPorId(UsuarioLogadoId);
    }

    private async Task Criar()
    {
        Ordem!.FerramentaId = Guid.Parse(FerramentaId!);
        Ordem.Situacao = "Espera";
        Ordem.UsuarioId = UsuarioLogadoId;
        Ordem.NomeFerramenta = Ferramenta!.Nome;
        Ferramenta!.Disponivel = false;

        try
        {
            resultado = await ordemEndpoints.Criar(Ordem);
            resultado = FiltrarResultado(resultado);

            if (resultado is not null)
                return;

            resultado = await ferramentaEndpoints.Atualizar(Ferramenta);
        }
        catch(Exception ex)
        {
            resultado = ex.Message;
        }

        if(resultado is null)
        {
            await CriarRelatorio();
            navManager.NavigateTo($"/ordens");
            return;
        }
    }
    private async Task CriarRelatorio()
    {
        Relatorio.Descricao = $"Foi criado uma ordem: {Ordem!.Descricao} da ferramenta {Ordem.NomeFerramenta}" +
        $"Nivel de urgência: {Ordem.NivelUrgencia} com o prazo até {Ordem.DataPrazoMaximo.ToString("dd/MM/yyyy")}.";
        Relatorio.NomeFerramenta = Ordem.NomeFerramenta;

        await relatorioEndpoints.Criar(Relatorio);
    }

    private string? FiltrarResultado(string? resultado)
    {
        if(resultado is not null)
        if (resultado.Contains("NivelUrgencia field is required"))
        {
            return "Selecione o nivel de urgência";
        }

        return null;
    }
}
